 <!DOCTYPE html>
 <head><head>

 <body>
<div>

<div><input type="text" id="addcode" style="width:300px"/>
<button onclick="addcode()">add</button></div>


</div>



 <canvas height="350" width="350" background="grey"></canvas>

 <div style="visibility:collapse;"><input type="text" id="fullcode" style="width:300px"/>
<button onclick="runrect()">run</button></div>

 <script>
 var cx = document.querySelector("canvas").getContext('2d');
cx.fillStyle="lightgrey";		
cx.fillRect(0,0,350,350);

var iptxt = document.getElementById("addcode");
iptxt.addEventListener("focus",function(){
this.value="";
});



function addcode(){
var addbox = document.getElementById("addcode");
currentcode.addingcode(addbox.value);
var box = document.getElementById("fullcode");
//box.value = currentcode.workingstring;
box.value = currentcode.executestring();

runrect();
}


function runrect(){
var box = document.getElementById("fullcode");
console.log(box.value);
var code = box.value;
var out = rPser(code,1);
var got = rExer(out);
simpledrawer(got);
}

function simpledrawer(arr){

// 		var cx = document.querySelector("canvas").getContext('2d');		
// 		cx.fillStyle="lightgrey";		
// 		cx.fillRect(0,0,300,300);
//      var somestring = "20,10,1,1";
//      console.log(somestring.split(",")[0]); 

 var cx=document.querySelector("canvas").getContext("2d");

 for (var i = 0; i<arr.length;i++){

    if  (arr[i].split(",")[4]=="B"){
     cx.fillStyle="black";
    }else if (arr[i].split(",")[4]=="W"){
    cx.fillStyle="white";
    }else{
    cx.fillStyle="lightgrey";
    }

        cx.fillRect(
         arr[i].split(",")[0]
        ,arr[i].split(",")[1]
        ,arr[i].split(",")[2]
        ,arr[i].split(",")[3]
        );
 }
}




/////////////////////
//CURRENTCODEOBJECT//
/////////////////////

var currentcode = {};

currentcode.workingstring = "";

currentcode.rectcount = 0;

currentcode.executestring = function(){
var temp = currentcode.workingstring.replace(/,CHILDREN/g,"");
return temp = temp.replace(/CHILDREN/g,"");
}

currentcode.addChild = function(chldstr,noden){

currentcode.rectcount = currentcode.rectcount + 1;

var idx = null;
var char = "";
var tarstr = "";
var wrstr =  currentcode.workingstring;

if(noden==undefined){
    noden=currentcode.rectcount;
}

    for (var place = 1 ; place < wrstr.length + 1; place++){
        char = wrstr[place - 1]
        tarstr= tarstr + char;
        if (char == "<") {idx = idx + 1;}
        if (char == ">") {idx = idx - 1;}
        if (char == "C"){//hey check "CHILDREN"
                var cflag = "c";
             }else{cflag="noc";}
        if(cflag == "c" && idx == noden){
            //var ido = tarstr.indexOf("CHILDREN");
            var ido = place ;
            var len = wrstr.length;
            var mae =  wrstr.slice(0,ido-1);
            var ushiro = wrstr.slice(ido - 1,len);
            currentcode.workingstring = mae + chldstr  + ushiro;
            //wrstr.length = wrstr.length + 11;
            //place = place + 11;
            wrstr.length = wrstr.length + chldstr.length;
            place = place + chldstr.length;
            return; 
        }          
    }
}

currentcode.codedresser = function(string) {
 return "<" + string + ",CHILDREN>";
}

currentcode.addingcode = function(string,whichnode){

//currentcode.rectcount = currentcode.rectcount + 1;

    if(currentcode.workingstring == ""){
        currentcode.workingstring = "<" + string + ",CHILDREN>";
        return currentcode.executestring()
    }
    else{
    currentcode.addChild(currentcode.codedresser(string),whichnode);
    //var out = currentcoce.workingstring;
    var out = currentcode.executestring();
    return out;
    }
}

// //FOR TEST// //
// //var code1 = "<BO,1,1,1,CHILDREN>"
// //var code2 = "<BO,2,2,2,CHILDREN>"
// //var code3 = "<BO,3,3,3,CHILDREN>"
// //currentcode.workingstring = code1;
// console.log(currentcode.addingcode("BO,9,9,9"));
// console.log(currentcode.workingstring);
// console.log(currentcode.addingcode("BO,1,1,1"));
// console.log(currentcode.workingstring);
// console.log(currentcode.addingcode("BO,2,2,2",2));
// console.log(currentcode.workingstring);






///////////////
///RECT CORE///
///////////////

function rExer(mot){

var out = [];

var dummyparent = {};
dummyparent.args = [0,0,0,0,0,0,0];
mot.parent[0] = dummyparent; 

innerExer(mot);

function innerExer(mot){

    arect(mot.args[1]*1,mot.args[2]*1,mot.args[3]*1,mot);

 for (var c = 0; c < mot.children.length; c++){
    innerExer(mot.children[c]);
    }

        function arect(w,h,grade,mot){

            lecs = mot.parent[0].args[5];
            lwai = mot.parent[0].args[6];
            lwid = mot.parent[0].args[1] * 1;
            lhei = mot.parent[0].args[2] * 1;

            var cnt = 0;
            myx = [];
            myy = [];
            
            for ( h1 = 0 ; h1 < lhei ; h1++ ){
                myx[cnt] = lecs + lwid;
                myy[cnt] = lwai + h1;
                cnt = cnt + 1;
            }
            for ( h2 = 0 ; h2 < lwid + w ; h2++ ){
                myx[cnt] = lecs + lwid - h2;
                myy[cnt] = lwai + lhei;
                cnt = cnt + 1;
            }
            for ( h3 = 0 ; h3 < lhei + h ; h3++ ){
                myx[cnt] = lecs - w;
                myy[cnt] = lwai + lhei - h3;
                cnt = cnt + 1;
            }
            for ( h4 = 0 ; h4 < lwid + w ; h4++ ){
                myx[cnt] = lecs - w + h4;
                myy[cnt] = lwai - h;
                cnt = cnt + 1;
            }

            //cx.fillStyle="black";
            //cx.fillRect(myx[grade],myy[grade],w,h);
            var outstring = myx[grade] + "," + myy[grade] + "," + w + "," + h + "," + mot.args[0];
            //console.log( outstring );
            mot.args.push(myx[grade]);
            mot.args.push(myy[grade]);
            out.push(outstring);
        } 
}

return out;
}






function rPser(code,place){

var onelet =function(string,which)
 {return string.slice(which-1,which);}

var starting = "yes";
var currbuf="";
var obj = {};
var rectcount = 0;
obj.args = [];
obj.children = [];
obj.mylen=0;
obj.parent = [];
var codelen = code.length;
var c = place;
    for(c; c<=codelen; c++){
       
        var let = onelet(code,c);
            if(let==">"){
                obj.args.push(currbuf);
                obj.mylen += 1;
                return obj;
            }
            else if(let == "<" && starting=="no"){
                var child = rPser(code,c);
                child.parent.push(obj);
                c = c + child.mylen - 1 //('<<' => '<')  ;
                obj.mylen = obj.mylen + child.mylen -1;
                obj.children.push(child);
            }
            else{
                starting = "no";
                if(let==","){
                obj.args.push(currbuf);
                currbuf="";
                }

                else{
                  if (let=="<"){rectcount=rectcount+1;}
                      else{    
                      currbuf = currbuf + let;
                      }
                   }
            }
         obj.mylen += 1;
    }
}


// ///TESTS///
// var code = "<BO,20,20,0,<BO,15,15,0,<BO,1,1,0>><BO,10,10,25>>";
// var code = "<BO,20,20,0,<BO,15,15,0,<BO,1,1,0>>>";
// var code = "<BO,20,20,0,<BO,15,15,0,<BO,3,3,0>><BO,10,10,0,<BO,12,12,5>>>";
// var out = rPser(code,1);
// var got = rExer(out);
// var stop = "stop";
// console.log(stop);
// //////////




		

  </script>
  </body>
  </html>